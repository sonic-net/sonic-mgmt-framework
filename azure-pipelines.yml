# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - 202???

pr:
  branches:
    include:
    - master
    - 202???

variables:
  - name: BUILD_BRANCH
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $(System.PullRequest.TargetBranch)
    ${{ else }}:
      value: $(Build.SourceBranchName)

resources:
  repositories:
  - repository: sonic-mgmt-common
    type: github
    name: sonic-net/sonic-mgmt-common
    endpoint: sonic-net
    ref: refs/heads/$(BUILD_BRANCH)

stages:
- stage: Build
  jobs:
  - job:
    displayName: "build"
    timeoutInMinutes: 60

    pool:
      vmImage: ubuntu-latest

    container:
      image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bookworm:latest

    steps:
    - checkout: self
      clean: true
      submodules: recursive
      displayName: 'Checkout code'

    - checkout: sonic-mgmt-common
      clean: true
      submodules: recursive
      displayName: 'Checkout sonic-mgmt-common'

    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: Azure.sonic-buildimage.official.vs
        artifact: sonic-buildimage.vs
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/$(BUILD_BRANCH)'
        patterns: |
          target/debs/bookworm/libyang*.deb
          target/python-wheels/bookworm/sonic_yang_models*.whl
      displayName: "Download sonic buildimage"

    - script: |
        # REDIS
        sudo apt-get update
        sudo apt-get install -y redis-server
        sudo sed -ri 's/^# unixsocket/unixsocket/' /etc/redis/redis.conf
        sudo sed -ri 's/^unixsocketperm .../unixsocketperm 777/' /etc/redis/redis.conf
        sudo sed -ri 's/redis-server.sock/redis.sock/' /etc/redis/redis.conf
        sudo service redis-server start

        # LIBYANG
        sudo dpkg -i ../target/debs/bookworm/libyang*1.0.73*.deb

        # Install from "requirement" files in sonic-mgmt-framework/tools/test directory.
        pushd sonic-mgmt-framework/tools/test

        [[ ! -f apt_requirements.txt ]] || \
            sed 's/#.*//' apt_requirements.txt | xargs -r sudo apt-get install -y

        [[ ! -f python2_requirements.txt ]] || \
            sudo pip install --no-cache-dir -r python2_requirements.txt

        [[ ! -f python3_requirements.txt ]] || \
            sudo pip3 install --no-cache-dir -r python3_requirements.txt

      displayName: "Install dependency"

    - script: |
        sudo pip3 install ../target/python-wheels/bookworm/sonic_yang_models-1.0-py3-none-any.whl
      displayName: "Install sonic yangs"

    - script: |
        set -ex
        pushd sonic-mgmt-common

        NO_TEST_BINS=1 dpkg-buildpackage -rfakeroot -b -us -uc -j$(nproc)
      displayName: "Build sonic-mgmt-common"

    - script: |
        set -ex
        pushd sonic-mgmt-framework

        dpkg-buildpackage -rfakeroot -us -uc -b -j$(nproc) && cp ../*.deb $(Build.ArtifactStagingDirectory)/
      displayName: "Build"

    - publish: $(Build.ArtifactStagingDirectory)/
      artifact: sonic-mgmt-framework
      displayName: "Archive artifacts"

    - script: |
        # Run REST Server gotests
        pushd sonic-mgmt-framework
        tools/test/rest-gotest.sh -bin
      displayName: "REST Server Sanity Test"

    - script: |
        # KLISH sanity
        pushd sonic-mgmt-framework
        tools/test/cli.sh -c 'exit'
      displayName: "KLISH Sanity Test"
